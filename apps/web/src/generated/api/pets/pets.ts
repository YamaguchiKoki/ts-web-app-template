/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
	useMutation,
	useQuery,
	useSuspenseInfiniteQuery,
	useSuspenseQuery,
} from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
	UseSuspenseInfiniteQueryOptions,
	UseSuspenseInfiniteQueryResult,
	UseSuspenseQueryOptions,
	UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
	CreatePetsBodyItem,
	Error,
	ListPetsParams,
	Pet,
	Pets,
} from "../../schemas";

import { customInstance } from "../../../lib/axios";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary List all pets
 */
export const listPets = (params?: ListPetsParams, signal?: AbortSignal) => {
	return customInstance<Pets>({ url: "/pets", method: "GET", params, signal });
};

export const getListPetsQueryKey = (params?: ListPetsParams) => {
	return ["/pets", ...(params ? [params] : [])] as const;
};

export const getListPetsQueryOptions = <
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listPets>>> = ({
		signal,
	}) => listPets(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listPets>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ListPetsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = unknown;

/**
 * @summary List all pets
 */

export function useListPets<
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getListPetsQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary List all pets
 */
export const prefetchListPets = async <
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	queryClient: QueryClient,
	params?: ListPetsParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
): Promise<QueryClient> => {
	const queryOptions = getListPetsQueryOptions(params, options);

	await queryClient.prefetchQuery(queryOptions);

	return queryClient;
};

export const getListPetsSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listPets>>> = ({
		signal,
	}) => listPets(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof listPets>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ListPetsSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsSuspenseQueryError = unknown;

/**
 * @summary List all pets
 */

export function useListPetsSuspense<
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getListPetsSuspenseQueryOptions(params, options);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getListPetsSuspenseInfiniteQueryOptions = <
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listPets>>> = ({
		signal,
	}) => listPets(params, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof listPets>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ListPetsSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsSuspenseInfiniteQueryError = unknown;

/**
 * @summary List all pets
 */

export function useListPetsSuspenseInfinite<
	TData = Awaited<ReturnType<typeof listPets>>,
	TError = unknown,
>(
	params?: ListPetsParams,
	options?: {
		query?: UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof listPets>>,
			TError,
			TData
		>;
	},
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getListPetsSuspenseInfiniteQueryOptions(params, options);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create a pet
 */
export const createPets = (
	createPetsBodyItem: CreatePetsBodyItem[],
	signal?: AbortSignal,
) => {
	return customInstance<Pet>({
		url: "/pets",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createPetsBodyItem,
		signal,
	});
};

export const getCreatePetsMutationOptions = <
	TError = Error,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createPets>>,
		TError,
		{ data: CreatePetsBodyItem[] },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createPets>>,
	TError,
	{ data: CreatePetsBodyItem[] },
	TContext
> => {
	const mutationKey = ["createPets"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createPets>>,
		{ data: CreatePetsBodyItem[] }
	> = (props) => {
		const { data } = props ?? {};

		return createPets(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreatePetsMutationResult = NonNullable<
	Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationBody = CreatePetsBodyItem[];
export type CreatePetsMutationError = Error;

/**
 * @summary Create a pet
 */
export const useCreatePets = <TError = Error, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createPets>>,
		TError,
		{ data: CreatePetsBodyItem[] },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof createPets>>,
	TError,
	{ data: CreatePetsBodyItem[] },
	TContext
> => {
	const mutationOptions = getCreatePetsMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Update a pet
 */
export const updatePets = (pet: Pet) => {
	return customInstance<Pet>({
		url: "/pets",
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: pet,
	});
};

export const getUpdatePetsMutationOptions = <
	TError = Error,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updatePets>>,
		TError,
		{ data: Pet },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updatePets>>,
	TError,
	{ data: Pet },
	TContext
> => {
	const mutationKey = ["updatePets"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updatePets>>,
		{ data: Pet }
	> = (props) => {
		const { data } = props ?? {};

		return updatePets(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdatePetsMutationResult = NonNullable<
	Awaited<ReturnType<typeof updatePets>>
>;
export type UpdatePetsMutationBody = Pet;
export type UpdatePetsMutationError = Error;

/**
 * @summary Update a pet
 */
export const useUpdatePets = <TError = Error, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updatePets>>,
		TError,
		{ data: Pet },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof updatePets>>,
	TError,
	{ data: Pet },
	TContext
> => {
	const mutationOptions = getUpdatePetsMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * @summary Info for a specific pet
 */
export const showPetById = (petId: string, signal?: AbortSignal) => {
	return customInstance<Pet>({ url: `/pets/${petId}`, method: "GET", signal });
};

export const getShowPetByIdQueryKey = (petId: string) => {
	return [`/pets/${petId}`] as const;
};

export const getShowPetByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
		signal,
	}) => showPetById(petId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!petId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof showPetById>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ShowPetByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = Error;

/**
 * @summary Info for a specific pet
 */

export function useShowPetById<
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getShowPetByIdQueryOptions(petId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Info for a specific pet
 */
export const prefetchShowPetById = async <
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	queryClient: QueryClient,
	petId: string,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
): Promise<QueryClient> => {
	const queryOptions = getShowPetByIdQueryOptions(petId, options);

	await queryClient.prefetchQuery(queryOptions);

	return queryClient;
};

export const getShowPetByIdSuspenseQueryOptions = <
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
		signal,
	}) => showPetById(petId, signal);

	return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
		Awaited<ReturnType<typeof showPetById>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ShowPetByIdSuspenseQueryResult = NonNullable<
	Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdSuspenseQueryError = Error;

/**
 * @summary Info for a specific pet
 */

export function useShowPetByIdSuspense<
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseSuspenseQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getShowPetByIdSuspenseQueryOptions(petId, options);

	const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
		TData,
		TError
	> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getShowPetByIdSuspenseInfiniteQueryOptions = <
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
		signal,
	}) => showPetById(petId, signal);

	return {
		queryKey,
		queryFn,
		...queryOptions,
	} as UseSuspenseInfiniteQueryOptions<
		Awaited<ReturnType<typeof showPetById>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ShowPetByIdSuspenseInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdSuspenseInfiniteQueryError = Error;

/**
 * @summary Info for a specific pet
 */

export function useShowPetByIdSuspenseInfinite<
	TData = Awaited<ReturnType<typeof showPetById>>,
	TError = Error,
>(
	petId: string,
	options?: {
		query?: UseSuspenseInfiniteQueryOptions<
			Awaited<ReturnType<typeof showPetById>>,
			TError,
			TData
		>;
	},
): UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getShowPetByIdSuspenseInfiniteQueryOptions(
		petId,
		options,
	);

	const query = useSuspenseInfiniteQuery(
		queryOptions,
	) as UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}
